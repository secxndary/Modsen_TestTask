// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace BookLibrary.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231226111249_AddIdentityData")]
    partial class AddIdentityData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eb8fd43e-aa3d-4bf2-bfac-b70af06668e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b73ca3e-5646-4e48-b3bd-e2dea6f85109",
                            Email = "root@example.org",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Root",
                            LockoutEnabled = true,
                            NormalizedEmail = "ROOT@EXAMPLE.ORG",
                            NormalizedUserName = "ROOT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375449274568",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3fc23d0a-cd53-4c0b-8bf9-f88e29f543c7",
                            TwoFactorEnabled = false,
                            UserName = "root"
                        },
                        new
                        {
                            Id = "1567fa9b-7fc8-4f4f-b4df-896397616bfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "834bf8bb-11fc-4505-97f2-24dcd18ff51b",
                            Email = "johndoe@example.org",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.ORG",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375291234567",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "e26d6019-b01f-4612-a5cf-92e2f0f1398e",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "3a08ecca-7fbe-4886-ad58-61998c01c9e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e920edf-fbd2-4471-bc8c-5b998bec22f6",
                            Email = "valdaitsevv@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Alexander",
                            LastName = "Valdaitsev",
                            LockoutEnabled = true,
                            NormalizedEmail = "VALDAITSEVV@MAIL.RU",
                            NormalizedUserName = "VALDAITSEVV",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375445574506",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d93eea16-c67e-470b-aab8-19a36cfd4700",
                            TwoFactorEnabled = false,
                            UserName = "valdaitsevv"
                        },
                        new
                        {
                            Id = "f94a3937-8935-48a4-81f3-4d6e33603c65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5840947-1d78-4938-8a6c-edde092523f1",
                            Email = "default@example.org",
                            EmailConfirmed = false,
                            FirstName = "Default",
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "DEFAULT@EXAMPLE.ORG",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375294859923",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "97684751-2487-4f50-b2e2-449cd93e3c3b",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "c459163f-341b-4073-a7b7-067c1ceeac15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea8230d2-5682-41c0-9b0f-16d75f6f2d71",
                            Email = "krotnichenko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alexei",
                            LastName = "Krotnichenko",
                            LockoutEnabled = true,
                            NormalizedEmail = "KROTNICHENKO@GMAIL.COM",
                            NormalizedUserName = "ELITE_LIBRARIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375333744859",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "bd3a191f-f0cf-4ade-8652-e78dbd5bdd91",
                            TwoFactorEnabled = false,
                            UserName = "elite_librarian"
                        },
                        new
                        {
                            Id = "ed3707a2-a416-4318-95a6-e462b10e9936",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e828c2d-4e53-43b3-a15d-832c3092dc01",
                            Email = "nmazenkov@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Nikolay",
                            LastName = "Mazenkov",
                            LockoutEnabled = true,
                            NormalizedEmail = "NMAZENKOV@MAIL.RU",
                            NormalizedUserName = "DEFAULT_LIBRARIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGzPOccYwucA6sQEj5E55e0KpyBuWurkfoUDOEBTe2FNdkpwiRbKI++HV/hopSptA==",
                            PhoneNumber = "+375447568124",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2e9be610-65a3-422b-9982-f1346d486fe9",
                            TwoFactorEnabled = false,
                            UserName = "default_librarian"
                        });
                });

            modelBuilder.Entity("Entities.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5df85459-145f-4ad6-ac61-983dfd81e1c1"),
                            FirstName = "Chuck",
                            LastName = "Palahniuk"
                        },
                        new
                        {
                            Id = new Guid("dddf6823-9ea0-4f0a-a4de-bbd0beb1f114"),
                            FirstName = "John Ronald",
                            LastName = "Tolkien"
                        },
                        new
                        {
                            Id = new Guid("9f87f1f9-929d-4d97-ad16-31d2d569a741"),
                            FirstName = "Margaret",
                            LastName = "Mitchell"
                        },
                        new
                        {
                            Id = new Guid("2796af44-1fcf-499b-b035-6e1a9b124162"),
                            FirstName = "Andrzej",
                            LastName = "Sapkowski"
                        },
                        new
                        {
                            Id = new Guid("05186e3e-8982-42ac-bcb3-002e318a48b8"),
                            FirstName = "Frank",
                            LastName = "Herbert"
                        },
                        new
                        {
                            Id = new Guid("4c27f650-5075-4514-92ec-46e9817a1fdd"),
                            FirstName = "Ernest",
                            LastName = "Hemingway"
                        });
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BorrowDateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BorrowDateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<string>("Title")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b714252d-b6ea-405b-b677-12ace22c5f56"),
                            AuthorId = new Guid("5df85459-145f-4ad6-ac61-983dfd81e1c1"),
                            BorrowDateEnd = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-7077-9427-7",
                            Title = "Fight Club"
                        },
                        new
                        {
                            Id = new Guid("5bfa4c5e-e410-436b-b728-a25d8aea298d"),
                            AuthorId = new Guid("5df85459-145f-4ad6-ac61-983dfd81e1c1"),
                            BorrowDateEnd = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-3332-3849-4",
                            Title = "Suffocation"
                        },
                        new
                        {
                            Id = new Guid("d49afd60-24fc-41d9-b9e0-56aa392e92ca"),
                            AuthorId = new Guid("5df85459-145f-4ad6-ac61-983dfd81e1c1"),
                            BorrowDateEnd = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-8031-4675-2",
                            Title = "Lullaby"
                        },
                        new
                        {
                            Id = new Guid("e4551d56-4dba-4ba6-8189-7512ffb2e450"),
                            AuthorId = new Guid("dddf6823-9ea0-4f0a-a4de-bbd0beb1f114"),
                            BorrowDateEnd = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-2668-5566-0",
                            Title = "The Silmarillion"
                        },
                        new
                        {
                            Id = new Guid("619c765f-24dd-4ee0-9e9c-8a8fc64e827c"),
                            AuthorId = new Guid("dddf6823-9ea0-4f0a-a4de-bbd0beb1f114"),
                            BorrowDateEnd = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-2876-3432-9",
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = new Guid("3ee6cb42-74ff-4cdf-a09c-03f0a1c4b28b"),
                            AuthorId = new Guid("dddf6823-9ea0-4f0a-a4de-bbd0beb1f114"),
                            BorrowDateEnd = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-3782-2861-7",
                            Title = "The Hobbit, or There and Back Again"
                        },
                        new
                        {
                            Id = new Guid("e5b11af4-77c6-4417-b688-162dd98a023e"),
                            AuthorId = new Guid("2796af44-1fcf-499b-b035-6e1a9b124162"),
                            BorrowDateEnd = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-2887-4531-0",
                            Title = "Miecz Przeznaczenia"
                        },
                        new
                        {
                            Id = new Guid("792a3d91-22fa-4c78-8661-a7c2cb1e15b8"),
                            AuthorId = new Guid("2796af44-1fcf-499b-b035-6e1a9b124162"),
                            BorrowDateEnd = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-1964-1253-6",
                            Title = "Ostatnie życzenie"
                        },
                        new
                        {
                            Id = new Guid("b246a750-a069-49b3-8913-aae02b0de49d"),
                            AuthorId = new Guid("05186e3e-8982-42ac-bcb3-002e318a48b8"),
                            BorrowDateEnd = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-3194-0445-5",
                            Title = "The Dune"
                        },
                        new
                        {
                            Id = new Guid("663ec857-77b1-4d11-8fe4-ebf7978eb978"),
                            AuthorId = new Guid("05186e3e-8982-42ac-bcb3-002e318a48b8"),
                            BorrowDateEnd = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-3241-5925-0",
                            Title = "Dune Messiah"
                        },
                        new
                        {
                            Id = new Guid("77e833a2-7b4e-4191-baeb-5bd530c098f8"),
                            AuthorId = new Guid("4c27f650-5075-4514-92ec-46e9817a1fdd"),
                            BorrowDateEnd = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-4032-7202-5",
                            Title = "The shortest story that will make anyone cry"
                        },
                        new
                        {
                            Id = new Guid("4b6d65c8-ca10-4202-87e0-ba536645b79a"),
                            AuthorId = new Guid("4c27f650-5075-4514-92ec-46e9817a1fdd"),
                            BorrowDateEnd = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-4032-7202-5",
                            Title = "For Whom the Bell Tolls"
                        },
                        new
                        {
                            Id = new Guid("fa275350-95b7-438c-925e-411478cf3d1c"),
                            AuthorId = new Guid("4c27f650-5075-4514-92ec-46e9817a1fdd"),
                            BorrowDateEnd = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-4032-7202-5",
                            Title = "A Farewell to Arms"
                        },
                        new
                        {
                            Id = new Guid("058e65fa-eec1-4e39-8238-a381d0d8a6d4"),
                            AuthorId = new Guid("9f87f1f9-929d-4d97-ad16-31d2d569a741"),
                            BorrowDateEnd = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-4032-7202-5",
                            Title = "Gone with the Wind"
                        },
                        new
                        {
                            Id = new Guid("e7a5e68d-02ed-4250-af48-b3eadffe19c7"),
                            AuthorId = new Guid("9f87f1f9-929d-4d97-ad16-31d2d569a741"),
                            BorrowDateEnd = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            BorrowDateStart = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            Isbn = "0-4032-7202-5",
                            Title = "Lost Laysen"
                        });
                });

            modelBuilder.Entity("Entities.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BooksGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("b714252d-b6ea-405b-b677-12ace22c5f56"),
                            GenreId = new Guid("88ad3525-dbcd-4df6-88e0-70ddae40dc45")
                        },
                        new
                        {
                            BookId = new Guid("5bfa4c5e-e410-436b-b728-a25d8aea298d"),
                            GenreId = new Guid("88ad3525-dbcd-4df6-88e0-70ddae40dc45")
                        },
                        new
                        {
                            BookId = new Guid("5bfa4c5e-e410-436b-b728-a25d8aea298d"),
                            GenreId = new Guid("4dbe2362-71e2-47dc-98a6-a8c1c2c3bb3b")
                        },
                        new
                        {
                            BookId = new Guid("d49afd60-24fc-41d9-b9e0-56aa392e92ca"),
                            GenreId = new Guid("88ad3525-dbcd-4df6-88e0-70ddae40dc45")
                        },
                        new
                        {
                            BookId = new Guid("d49afd60-24fc-41d9-b9e0-56aa392e92ca"),
                            GenreId = new Guid("4dbe2362-71e2-47dc-98a6-a8c1c2c3bb3b")
                        },
                        new
                        {
                            BookId = new Guid("e4551d56-4dba-4ba6-8189-7512ffb2e450"),
                            GenreId = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf")
                        },
                        new
                        {
                            BookId = new Guid("619c765f-24dd-4ee0-9e9c-8a8fc64e827c"),
                            GenreId = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf")
                        },
                        new
                        {
                            BookId = new Guid("3ee6cb42-74ff-4cdf-a09c-03f0a1c4b28b"),
                            GenreId = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf")
                        },
                        new
                        {
                            BookId = new Guid("e5b11af4-77c6-4417-b688-162dd98a023e"),
                            GenreId = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf")
                        },
                        new
                        {
                            BookId = new Guid("792a3d91-22fa-4c78-8661-a7c2cb1e15b8"),
                            GenreId = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf")
                        },
                        new
                        {
                            BookId = new Guid("b246a750-a069-49b3-8913-aae02b0de49d"),
                            GenreId = new Guid("ddc73049-a302-4148-812d-32912ae83dd2")
                        },
                        new
                        {
                            BookId = new Guid("b246a750-a069-49b3-8913-aae02b0de49d"),
                            GenreId = new Guid("1f7bc731-4f1a-4d69-9c20-696d67f34b8b")
                        },
                        new
                        {
                            BookId = new Guid("663ec857-77b1-4d11-8fe4-ebf7978eb978"),
                            GenreId = new Guid("ddc73049-a302-4148-812d-32912ae83dd2")
                        },
                        new
                        {
                            BookId = new Guid("663ec857-77b1-4d11-8fe4-ebf7978eb978"),
                            GenreId = new Guid("4dbe2362-71e2-47dc-98a6-a8c1c2c3bb3b")
                        },
                        new
                        {
                            BookId = new Guid("77e833a2-7b4e-4191-baeb-5bd530c098f8"),
                            GenreId = new Guid("6bf1774a-d50a-4ced-8411-fa8c5e1dd4ec")
                        },
                        new
                        {
                            BookId = new Guid("77e833a2-7b4e-4191-baeb-5bd530c098f8"),
                            GenreId = new Guid("1f7bc731-4f1a-4d69-9c20-696d67f34b8b")
                        });
                });

            modelBuilder.Entity("Entities.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddc73049-a302-4148-812d-32912ae83dd2"),
                            Description = "Genre focused on narratives involving elements of the supernatural, magic, or extraordinary phenomena",
                            Name = "Fantastic"
                        },
                        new
                        {
                            Id = new Guid("189ebc8a-2ced-4202-bb1f-52e29f059cbf"),
                            Description = "Involves magical or mythical elements set in a fictional world often with magical creatures, quests, and adventures",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("4dbe2362-71e2-47dc-98a6-a8c1c2c3bb3b"),
                            Description = "Centers around solving mysteries, typically featuring a protagonist investigator unraveling puzzles or crimes",
                            Name = "Detective"
                        },
                        new
                        {
                            Id = new Guid("6bf1774a-d50a-4ced-8411-fa8c5e1dd4ec"),
                            Description = "Emphasizes realistic characters and their emotional journeys through life's challenges and conflicts",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("1f7bc731-4f1a-4d69-9c20-696d67f34b8b"),
                            Description = "A broad category encompassing a wide range of fictional narratives that explore various themes, characters, and settings",
                            Name = "Novel"
                        },
                        new
                        {
                            Id = new Guid("88ad3525-dbcd-4df6-88e0-70ddae40dc45"),
                            Description = "Builds suspense and tension, often involving danger, high stakes, and unexpected plot twists to keep readers on edge",
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f51135f0-adf7-4506-960e-f10ae287f792",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "744a95cd-b364-44bd-842d-6ca02f9fe5fa",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "eb8fd43e-aa3d-4bf2-bfac-b70af06668e9",
                            RoleId = "f51135f0-adf7-4506-960e-f10ae287f792"
                        },
                        new
                        {
                            UserId = "1567fa9b-7fc8-4f4f-b4df-896397616bfe",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "3a08ecca-7fbe-4886-ad58-61998c01c9e0",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "f94a3937-8935-48a4-81f3-4d6e33603c65",
                            RoleId = "2bb2806b-1cf8-4dfd-9b69-ffc889f3e577"
                        },
                        new
                        {
                            UserId = "c459163f-341b-4073-a7b7-067c1ceeac15",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        },
                        new
                        {
                            UserId = "ed3707a2-a416-4318-95a6-e462b10e9936",
                            RoleId = "744a95cd-b364-44bd-842d-6ca02f9fe5fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Entities.Models.BookGenre", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Entities.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
